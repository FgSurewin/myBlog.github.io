<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>this in JavaScript</title>
    <url>/myBlog.github.io/2020/04/18/this/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/this.png" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>In most cases, the value of <code>this</code> is determined by how a function is called (runtime binding). It can’t be set by assignment during execution, and it may be different each time the function is called.</p>
</blockquote>
<p>与其他语言相比, JavaScript 的 this 表现的情况会有些许不同. 大多数的情况下, this 的值是由当时运行时所绑定函数而决定.</p>
<a id="more"></a>

<p>ES5 引出了一个新方法<code>bind()</code>来绑定我们所需的函数而不管正在调用它的函数.</p>
<p>ES2015 则推出箭头函数. 箭头函数本身并不提供 this, 它所保留的 this 值是来源于它外部”正常函数”的<strong>词性环境</strong></p>
<p><strong>简言之, 普通函数中的 this 取决于当时调用这个 this 的函数的词性环境, 箭头函数中的 this 取决于包裹该箭头函数的外部函数的词性环境</strong></p>
<h2 id="对象中的-this"><a href="#对象中的-this" class="headerlink" title="对象中的 this"></a>对象中的 this</h2><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>如果你是 JavaScript 的初学者, 那么你很大可能在学习对象时学习到 this.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	name: <span class="string">'Tom'</span>,</span><br><span class="line">	callName() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.callName(); <span class="comment">// Tom</span></span><br></pre></td></tr></table></figure>

<p>this 的出现, 有效地解决了对象方法的<strong>局限性</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	name: <span class="string">'Tom'</span>,</span><br><span class="line">	callName() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(person.name);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> other = person;</span><br><span class="line">other.callName(); <span class="comment">// 这里会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="Internals-ReferenceType-内部-引用类型"><a href="#Internals-ReferenceType-内部-引用类型" class="headerlink" title="Internals: ReferenceType(内部: 引用类型)"></a>Internals: ReferenceType(内部: 引用类型)</h3><p>在这里讨论引用类型, 主要是讨论一个很简单却又很容易忽视的问题.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.callName();</span><br></pre></td></tr></table></figure>

<p>上面的代码是一个常规的对象引用自身方法, 没有太多的疑问, 很熟练的使用. 但是有没有想过为什么要遵循这样的格式?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用一个三元运算符来提出问题</span></span><br><span class="line"><span class="comment">// 还是利用原有的对象</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    callName()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(person.name)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sayHi()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Hi!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">(person.name == <span class="string">"Tom"</span> ? person.callName : person.sayHi)(); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>To make <code>person.callName()</code> calls work, JavaScript uses a trick – the dot <code>&#39;.&#39;</code> returns not a function, but a value of the special <a href="https://tc39.github.io/ecma262/#sec-reference-specification-type" target="_blank" rel="noopener">Reference Type</a>.</strong></p>
<p>The Reference Type is a “specification type”. We can’t explicitly use it, but it is used internally by the language.</p>
<p>The value of Reference Type is a three-value combination <code>(base, name, strict)</code>, where:</p>
<ul>
<li><code>base</code> is the object.</li>
<li><code>name</code> is the property name.</li>
<li><code>strict</code> is true if <code>use strict</code> is in effect.</li>
</ul>
</blockquote>
<p>为了使用<code>person.callName()</code>能够正常工作, JavaScript 使用了”.” 返回一个特殊的引用类型的值.</p>
<p>通过研读资料可知, 引用类型的值是由三个值来共同构成 (对象本身, 方法名, 严格模式与否)</p>
<h3 id="Constructor-构造函数"><a href="#Constructor-构造函数" class="headerlink" title="Constructor(构造函数)"></a>Constructor(构造函数)</h3><p><code>this</code>在构造函数中表现是最”正常”的, 因为与其他语言的功能一样, 用于代指每一个通过该构造函数所构建的新的实例对象.</p>
<p>如果你是初次接触编程语言并且选择 JavaScript 作为你的第一门编程语言, 你也不用对于构造函数中的<code>this</code>过于恐惧.</p>
<p>构造函数的特点是通过<code>new</code>字符来创建新的实例对象, 当一个函数被使用 <code>new</code> 操作符执行时，它按照以下步骤：</p>
<ol>
<li>一个新的空对象被创建并分配给 <code>this</code>。</li>
<li>函数体执行。通常它会修改 <code>this</code>，为其添加新的属性。</li>
<li>返回 <code>this</code> 的值。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">	<span class="comment">// this = &#123;&#125;;（隐式创建）</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加属性到 this</span></span><br><span class="line">	<span class="keyword">this</span>.name = name;</span><br><span class="line">	<span class="keyword">this</span>.isAdmin = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// return this;（隐式返回）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = <span class="keyword">new</span> User(<span class="string">'Martin'</span>);</span><br><span class="line"><span class="comment">// 等同于 student = &#123;name: "Martin" , isAdmin : false&#125;;</span></span><br></pre></td></tr></table></figure>

<h2 id="函数中的-this"><a href="#函数中的-this" class="headerlink" title="函数中的 this"></a>函数中的 this</h2><p>在非严格模式(non-strict mode)下, 全局作用域(global scope)下的 this 会指向 window</p>
<blockquote>
<p>你可能还知道在 node.js 中, 全局作用域下的 this 会指向 global</p>
</blockquote>
<h3 id="词性环境"><a href="#词性环境" class="headerlink" title="词性环境"></a>词性环境</h3><h4 id="变量与函数声明"><a href="#变量与函数声明" class="headerlink" title="变量与函数声明"></a>变量与函数声明</h4><p>在 JavaScript 中，每个运行的函数，代码块 <code>{...}</code> 以及整个脚本，都有一个被称为 <strong>词法环境（Lexical Environment）</strong> 的内部（隐藏）的关联对象。</p>
<blockquote>
<p>简单来说, 每一个代码块都会形成一个内部空间, 我们所研究的 this, 实际上就是研究被调用的函数正处于哪个”内部空间”.</p>
</blockquote>
<p>词法环境对象由两部分组成：</p>
<ol>
<li><strong>环境记录（Environment Record）</strong> —— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 <code>this</code> 的值）的对象。</li>
<li>对 <strong>外部词法环境</strong> 的引用，与外部代码相关联。</li>
</ol>
<blockquote>
<p><strong>NOTE:</strong> 你可能还会在 MDN 上看到 Lexical Context</p>
</blockquote>
<p>一个“变量”只是 <strong>环境记录</strong> 这个特殊的内部对象的一个属性。“获取或修改变量”意味着“获取或修改词法环境的一个属性”。</p>
<p>举个例子，这段没有函数的简单的代码中只有一个词法环境：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200416225115.png" alt=""></p>
<p>这就是所谓的与整个脚本相关联的 <strong>全局</strong> 词法环境。</p>
<p>在上面的图片中，矩形表示环境记录（变量存储），箭头表示外部引用。全局词法环境没有外部引用，所以箭头指向了 <code>null</code>。</p>
<p>随着代码开始并继续运行，词法环境发生了变化。</p>
<blockquote>
<p><strong>词法环境是一个规范对象</strong></p>
<p>“词法环境”是一个规范对象（specification object）：它仅仅是存在于 <a href="https://tc39.es/ecma262/#sec-lexical-environments" target="_blank" rel="noopener">编程语言规范</a> 中的“理论上”存在的，用于描述事物如何运作的对象。我们无法在代码中获取该对象并直接对其进行操作。</p>
<p>但 JavaScript 引擎同样可以优化它，比如清除未被使用的变量以节省内存和执行其他内部技巧等，但显性行为应该是和上述的无差。</p>
</blockquote>
<p>一个函数其实也是一个值，就像变量一样。</p>
<p><strong>不同之处在于函数声明的初始化会被立即完成。</strong></p>
<p>当创建了一个词法环境（Lexical Environment）时，函数声明会立即变为即用型函数（不像 <code>let</code> 那样直到声明处才可用）。</p>
<p>这就是为什么我们可以在（函数声明）的定义之前调用函数声明。也就是我们所说的”提升”(hoisting)</p>
<blockquote>
<p>提及提升, 我们很自然会想到变量提升<code>var</code>这个声明词. 它不仅破坏块级作用域这个问题, 其实提升有时候也会成为问题, 所以应该尽量使用<code>let</code> 和<code>const</code>来替代他</p>
</blockquote>
<p>正常来说，这种行为仅适用于函数声明，而不适用于我们将函数分配给变量的函数表达式，例如 <code>let say = function(name)...</code>。</p>
<h4 id="内部和外部的词性环境"><a href="#内部和外部的词性环境" class="headerlink" title="内部和外部的词性环境"></a>内部和外部的词性环境</h4><p>在一个函数运行时，在调用刚开始时，会自动创建一个新的词法环境以存储这个调用的局部变量和参数。</p>
<p>例如，对于 <code>say(&quot;John&quot;)</code>，它看起来像这样（当前执行位置在箭头标记的那一行上）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200416230059.png" alt=""></p>
<p>在这个函数调用期间，我们有两个词法环境：内部一个（用于函数调用）和外部一个（全局）：</p>
<ul>
<li>内部词法环境与 <code>say</code> 的当前执行相对应。它具有一个单独的属性：<code>name</code>，函数的参数。我们调用的是 <code>say(&quot;John&quot;)</code>，所以 <code>name</code> 的值为 <code>&quot;John&quot;</code>。</li>
<li>外部词法环境是全局词法环境。它具有 <code>phrase</code> 变量和函数本身。</li>
</ul>
<p>内部词法环境引用了 <code>outer</code>。</p>
<p><strong>当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。</strong></p>
<p>如果在任何地方都找不到这个变量，那么在严格模式下就会报错（在非严格模式下，为了向下兼容，给未定义的变量赋值会创建一个全局变量）。</p>
<blockquote>
<p><strong>Note:</strong> 你可能会在学习的过程中了解过作用域链(scope chain), 其实作用域也是用于描述块状结构的代码. 而其中的作用域链就是这里所描述的内部与外部词性环境.</p>
</blockquote>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>在你掌握词性环境后, 闭包(closure)的问题便不再是问题.</p>
<p>从下方的简答计数器函数可以了解到, 闭包能够将计数器独立化, 让块级代码私有化. 因为外部的 count 被内部的<code>count++</code>所引用, 所以变量 count 并没有被垃圾回收, 实现闭包.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> count++;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = makeCounter();</span><br></pre></td></tr></table></figure>

<p>下面来看词性环境的搜寻:</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200416234518.png" alt=""></p>
<blockquote>
<p><strong>闭包</strong></p>
<p>开发者通常应该都知道“闭包”这个通用的编程术语。</p>
<p><a href="https://en.wikipedia.org/wiki/Closure_(computer_programming)" target="_blank" rel="noopener">闭包</a> 是指内部函数总是可以访问其所在的外部函数中声明的变量和参数，即使在其外部函数被返回（寿命终结）了之后。在某些编程语言中，这是不可能的，或者应该以特殊的方式编写函数来实现。但是如上所述，在 JavaScript 中，所有函数都是天生闭包的（只有一个例外，将在 <a href="https://zh.javascript.info/new-function" target="_blank" rel="noopener">“new Function” 语法</a> 中讲到）。</p>
<p>也就是说：JavaScript 中的函数会自动通过隐藏的 <code>[[Environment]]</code> 属性记住创建它们的位置，所以它们都可以访问外部变量。</p>
</blockquote>
<h3 id="普通函数中的-this"><a href="#普通函数中的-this" class="headerlink" title="普通函数中的 this"></a>普通函数中的 this</h3><p>普通函数中的 this 取决于调用时函数的词性环境. 如果想研究或者避免 this 的丢失, 我们只需要观察函数所在的词性环境即可.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Zoo = &#123;</span><br><span class="line">	run() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Zoo.run(); <span class="comment">// Zoo</span></span><br></pre></td></tr></table></figure>

<p>从词性环境而言, 每一个代码块都是一个独立的环境. Zoo 对象的内部会形成一个词性环境, 而<code>run()</code>则是该作用域下的一个变量(函数变量).</p>
<p><code>run()</code>中的 this 会指向该函数所处的作用域 ==&gt; Zoo 本身</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Zoo = &#123;</span><br><span class="line">	run() &#123;</span><br><span class="line">		<span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		walk();</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Zoo.run(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<p>内部<code>walk()</code>函数处于由<code>run()</code>创建的词性环境, 这时候 this 已经完全脱离父级<code>run()</code>函数所处的环境, 所以 this 会丢失.</p>
<p>这时候的 this 就会如同全局作用域下的函数一样, 会将 this 直接指向 window.</p>
<h4 id="this-的丢失"><a href="#this-的丢失" class="headerlink" title="this 的丢失"></a>this 的丢失</h4><p>在这之前, 可能你对 this 的丢失只是知道常见的场景.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单的丢失</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	name: <span class="string">'Tom'</span>,</span><br><span class="line">	callName() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fcn = person.callName;</span><br><span class="line">fcn();</span><br></pre></td></tr></table></figure>

<p>这里丢失 this 的原因是: 将函数<code>callName()</code>赋值给全局变量<code>fcn</code>, 这时候的 this 指向的是<code>window</code>, 而在全局的词性环境中并没有 name 这个变量, 所以会出现<code>undefined</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法中内嵌函数</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	callName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fcn = person.callName();</span><br><span class="line">fcn(); <span class="comment">// window</span></span><br><span class="line">person.callName()(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure>

<p>同样是将词性环境指向全局, <code>person.callName()()</code>可能会出现误会, 误认为还在函数里面. 其实可以改成如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>)&#125;()</span><br></pre></td></tr></table></figure>

<p>第三种是关于定时器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">	firstName: <span class="string">'John'</span>,</span><br><span class="line">	sayHi() &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.firstName&#125;</span>!`</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">setTimeout(user.sayHi, <span class="number">1000</span>); <span class="comment">// Hello, undefined!</span></span><br></pre></td></tr></table></figure>

<p>浏览器中的 <code>setTimeout</code> 方法有些特殊：它为函数调用设定了 <code>this=window</code>（对于 Node.js，<code>this</code> 则会变为计时器（timer）对象，但在这儿并不重要）。所以对于 <code>this.firstName</code>，它其实试图获取的是 <code>window.firstName</code>，这个变量并不存在。在其他类似的情况下，通常 <code>this</code> 会变为 <code>undefined</code>。</p>
<blockquote>
<p>所有所谓的丢失 this 的场景, 其实都是词性环境的改变.</p>
<p>理解函数的词性环境是理解 this 的关键步骤</p>
</blockquote>
<h4 id="绑定-this"><a href="#绑定-this" class="headerlink" title="绑定 this"></a>绑定 this</h4><ul>
<li>利用<code>bind()</code>方法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	callName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">		&#125;.bind(<span class="keyword">this</span>);</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fcn = person.callName();</span><br><span class="line">fcn(); <span class="comment">// person</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用<code>that = this</code></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">	callName() &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(that);</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fcn = person.callName();</span><br><span class="line">fcn(); <span class="comment">// person</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用箭头函数</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    callName()&#123;</span><br><span class="line">        <span class="keyword">return</span> () = &gt; <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fcn = person.callName();</span><br><span class="line">fcn();  <span class="comment">// person</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>箭头函数除了语法上简约, 更大的作用是解决 this 在普通 function 上的问题.</p>
<blockquote>
<p>日常中, 在方法内部使用函数是常见的.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">	bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> x = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>;</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call bar as a method of obj, setting its this to obj</span></span><br><span class="line"><span class="comment">// Assign a reference to the returned function to fn</span></span><br><span class="line"><span class="keyword">var</span> fn = obj.bar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call fn without setting this, would normally default</span></span><br><span class="line"><span class="comment">// to the global object or undefined in strict mode</span></span><br><span class="line"><span class="built_in">console</span>.log(fn() === obj); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// But caution if you reference the method of obj without calling it</span></span><br><span class="line"><span class="keyword">var</span> fn2 = obj.bar;</span><br><span class="line"><span class="comment">// Calling the arrow function's this from inside the bar method()</span></span><br><span class="line"><span class="comment">// will now return window, because it follows the this from fn2.</span></span><br><span class="line"><span class="built_in">console</span>.log(fn2()() == <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>处理箭头函数中的 this 主要看待的是包裹在外部的函数, 外面的函数的位置改变了, 作为内部的箭头函数的 this 也会改变.</p>
<h2 id="React-中的-this"><a href="#React-中的-this" class="headerlink" title="React 中的 this"></a>React 中的 this</h2><p>在使用 class 来创建我们的组件时, this 会成为我们绕不开的一个难关.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.state=&#123;</span><br><span class="line">            defaultValue: <span class="string">''</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// this.handleChange = this.handleChange.bind(this);</span></span><br><span class="line">        <span class="comment">// 如果不是箭头函数, 则需要绑定this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            defaultValue: e.target.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;defaultValue&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	&lt;input</span><br><span class="line">                type=<span class="string">"text"</span></span><br><span class="line">                onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">                value=&#123;defaultValue&#125;</span><br><span class="line">             /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逐步分析过程会发现, 我们说讨论的 this 是指内部<code>this.setState()</code>当中的 this. 在<code>render()</code>里面出现的第一个 this 其实是指向通过该 class 所创建的对象的. 但是普通函数内部的函数就会丢失 this.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">render()&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;defaultValue&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        	&lt;input</span><br><span class="line">                type=<span class="string">"text"</span></span><br><span class="line">                onChange=&#123;e =&gt; &#123;</span><br><span class="line">        			<span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            			defaultValue: e.target.value</span><br><span class="line">        			&#125;)</span><br><span class="line">    			&#125;&#125;</span><br><span class="line">                value=&#123;defaultValue&#125;</span><br><span class="line">             /&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 如果直接将函数放进内部, 这样就能清楚看到这是一个内嵌函数, this会丢失</span></span><br></pre></td></tr></table></figure>

<p>所以使用箭头函数能解决这个问题, 如果你还是不懂, 你可以直接选择用函数组件. 鉴于新特性 Hook 的出现, 函数组件会变为主流.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">const</span> [defaultValue, setDefaultValue] = useState(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;input</span><br><span class="line">			type=<span class="string">'text'</span></span><br><span class="line">			onChange=&#123;(e) =&gt; &#123;</span><br><span class="line">				setDefaultValue(e.target.value);</span><br><span class="line">			&#125;&#125;</span><br><span class="line">			value=&#123;defaultValue&#125;</span><br><span class="line">		/&gt;</span><br><span class="line">	);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Exception</title>
    <url>/myBlog.github.io/2020/04/15/Exception/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/Exception.png" alt=""></p>
<h2 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h2><blockquote>
<p>An exception is an object that is generated as the result of an error or an unexpected event.</p>
</blockquote>
<a id="more"></a>

<h3 id="Exception-Handler"><a href="#Exception-Handler" class="headerlink" title="Exception Handler"></a>Exception Handler</h3><p>To detect that an exception has been thrown and prevent it from halting your application, Java allows you to create <strong>exception handler</strong>.</p>
<p><strong>Attention:</strong></p>
<p>If your code does not handle an exception when it is thrown, the <em>default exception handler</em> deals with it. The default exception handler prints an error message and <strong>crashes the program</strong>.</p>
<h3 id="Exception-Classes"><a href="#Exception-Classes" class="headerlink" title="Exception Classes"></a>Exception Classes</h3><p>As previously mentioned, <strong>an exception is an object.</strong> Exception objects are created from classes in the Java API. All of the exceptions that you will handle are instances of classes that inherit from Exception.</p>
<blockquote>
<p>The exception classes are in package in the Java API. For example, <code>FileNotFoundException</code> is in the <code>java.io.package</code>.</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200414231539.png" alt=""></p>
<h3 id="Handling-an-Exception"><a href="#Handling-an-Exception" class="headerlink" title="Handling an Exception"></a>Handling an Exception</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Basic Syntax</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    ...statements</span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionType parameters)&#123;</span><br><span class="line">    ...statements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You can think of the code in the try block as being “protected” because the application will not halt if the try block throws an exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[ ] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] myNumbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    System.out.println(myNumbers[<span class="number">10</span>]); <span class="comment">// error!</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result</span></span><br><span class="line"><span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ArrayIndexOutOfBoundsException: <span class="number">10</span></span><br><span class="line">        at MyClass.main(MyClass.java:<span class="number">4</span>)</span><br></pre></td></tr></table></figure>

<p>Fixed it by using <strong>try/catch</strong> statement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[ ] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">int</span>[] myNumbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">      System.out.println(myNumbers[<span class="number">10</span>]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Something went wrong."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// Exception is super class of other specific exceptions.</span></span><br><span class="line"> <span class="comment">// We will talk about it on polymorphism.</span></span><br></pre></td></tr></table></figure>

<p><strong>Attention:</strong></p>
<p>Not all statements inside a <strong>try</strong> block will be executed. When an exception is thrown, <strong>the try block is exited immediately</strong>. This means that statements appearing in the try block after the offending statement will not be executed.</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200414234002.png" alt=""></p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200414234116.png" alt=""></p>
<h3 id="Retrieving-the-Default-Error-Message"><a href="#Retrieving-the-Default-Error-Message" class="headerlink" title="Retrieving the Default Error Message"></a>Retrieving the Default Error Message</h3><p>Each exception object has a method named <code>getMessage</code> that can be used to retrieve the<br>default error message for the exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcepTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">int</span> a[] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">         System.out.println(<span class="string">"Access element three :"</span> + a[<span class="number">3</span>]);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">         System.out.println(<span class="string">"Exception thrown  :"</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">"Out of the block"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Common Exception Methods</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// return a Throwable object to represent the reason of exception</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Throwable <span class="title">getCause</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// Print out the system error comes from stack</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pritStackTrace</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<h3 id="Polymorphic-References-to-Exceptions"><a href="#Polymorphic-References-to-Exceptions" class="headerlink" title="Polymorphic References to Exceptions"></a>Polymorphic References to Exceptions</h3><p>a reference variable of a <strong>superclass type</strong> can reference <strong>subclass objects</strong>. This is called <strong>polymorphism</strong>. When handling exceptions, you can use a polymorphic reference as a parameter in the <code>catch</code> clause.</p>
<p>For example, all of the exceptions that we have dealt with inherit from the <strong>Exception class</strong>. So, a <code>catch</code> clause that uses a parameter variable of the Exception type is capable of catching any exception that inherits from the <strong>Exception class</strong>.</p>
<h3 id="Using-Multiple-catch-Clauses-to-Handle"><a href="#Using-Multiple-catch-Clauses-to-Handle" class="headerlink" title="Using Multiple catch Clauses to Handle"></a>Using Multiple <code>catch</code> Clauses to Handle</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">    Scanner inputFile = <span class="keyword">new</span> Scanner(file)</span><br><span class="line">&#125; <span class="keyword">catch</span>(FileNotFoundException e) &#123; <span class="comment">// Not valid!</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can use the same parameter name because the code only "hit" the error once.</span></span><br><span class="line"><span class="comment">// When the code "kick" the error, it will be sent to the related exception.</span></span><br></pre></td></tr></table></figure>

<p><strong>Attention: Handle Each Exception Only Once in a <code>try</code> Statement</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	number = Integer.parseInt(str);</span><br><span class="line">&#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">	System.out.println(<span class="string">"Bad number format."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ERROR!!! NumberFormatException has already been caught!</span></span><br><span class="line"><span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">	System.out.println(str + <span class="string">" is not a number."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Sometimes you can cause this error by using polymorphic references. For example, look at following picture, which shows an inheritance hierarchy for the <code>NumberFormatException</code> class.</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200415002149.png" alt=""></p>
<p>As you can see from the figure, the <code>NumberFormatException</code> class inherits from the <code>IllegalArgumentException</code> class. Now look at the following code:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	number = Integer.parseInt(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IllegalArgumentException e)&#123;</span><br><span class="line">	System.out.println(<span class="string">"Bad number format."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This will also cause an error.</span></span><br><span class="line"><span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">	System.out.println(str + <span class="string">" is not a number."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The compiler issues an error message regarding the second catch clause, reporting that <code>NumberFormatException</code> has already been caught. This is because the first catch clause, which catches <code>IllegalArgumentException</code> objects, will <strong>polymorphically</strong> catch <code>NumberFormatException</code> objects.</p>
<h3 id="The-finally-Clause"><a href="#The-finally-Clause" class="headerlink" title="The finally Clause"></a>The <code>finally</code> Clause</h3><p>As I mentioned before, the code inside the <code>try</code> block will not be executed when the error occurs. But what if you want the code to be successfully executed after throwing a error? You can use the key word called <code>finally</code>.</p>
<p>The try statement may have an optional <code>finally</code> clause, which must appear after all of the catch clauses.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">int</span>[] myNumbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">      System.out.println(myNumbers[<span class="number">10</span>]);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Something went wrong."</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"The 'try catch' is finished."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="comment">// The output will be:</span></span><br><span class="line">Something went wrong.</span><br><span class="line">The <span class="string">'try catch'</span> is finished.</span><br></pre></td></tr></table></figure>

<p><strong>The statements in the <code>finally</code> block execute whether an exception occurs or not.</strong></p>
<h3 id="The-Stack-Trace"><a href="#The-Stack-Trace" class="headerlink" title="The Stack Trace"></a>The Stack Trace</h3><p>A stack trace is a list of all the methods in the call stack. It indicates the method that was executing when an exception occurred and all of the methods that were called in order to execute that method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Program Output</span></span><br><span class="line">Calling myMethod...</span><br><span class="line">Calling produceError...</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.StringIndexOutOfBoundsException:</span><br><span class="line">String index out of range: <span class="number">3</span></span><br><span class="line">at java.lang.String.charAt(Unknown Source)</span><br><span class="line">at StackTrace.produceError(StackTrace.java:<span class="number">35</span>)</span><br><span class="line">at StackTrace.myMethod(StackTrace.java:</span><br></pre></td></tr></table></figure>

<h3 id="Handling-Multiple-Exceptions-with-One-catch-Clause"><a href="#Handling-Multiple-Exceptions-with-One-catch-Clause" class="headerlink" title="Handling Multiple Exceptions with One catch Clause"></a>Handling Multiple Exceptions with One <code>catch</code> Clause</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">(<span class="keyword">try</span> block statements . . .)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(NumberFormatException | IOException | InputMismatchException ex)</span><br><span class="line">&#123;</span><br><span class="line">respondToError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="When-an-Exception-Is-Not-Caught"><a href="#When-an-Exception-Is-Not-Caught" class="headerlink" title="When an Exception Is Not Caught"></a>When an Exception Is Not Caught</h3><p>When an exception is thrown, it cannot be ignored. It must be handled by the program, or by the default exception handler.</p>
<h3 id="Checked-and-Unchecked-Exceptions"><a href="#Checked-and-Unchecked-Exceptions" class="headerlink" title="Checked and Unchecked Exceptions"></a>Checked and Unchecked Exceptions</h3><p><strong>Unchecked exception:</strong></p>
<p>Unchecked exceptions are those that inherit from the Error class or the <code>RuntimeException</code> class. Recall that the exceptions that inherit from Error are thrown when a critical error occurs, such as running out of memory.</p>
<p>You should not handle these exceptions because the conditions that cause them can rarely be dealt with in the program.</p>
<p><strong>Checked exception:</strong></p>
<p>All of the remaining exceptions (that is, those that do not inherit from Error or <code>RuntimeException</code>) are checked exceptions. These are the exceptions that you should handle in your program.</p>
<p>If the code in a method can potentially throw a checked exception, then that method must meet one of the following requirements:</p>
<p><strong>• It must handle the exception, or</strong></p>
<p><strong>• It must have a throws clause listed in the method header.</strong></p>
<table>
<thead>
<tr>
<th>Checked Exception</th>
<th>Unchecked Exception</th>
</tr>
</thead>
<tbody><tr>
<td><code>ClassNotFoundException</code></td>
<td><code>ArithmeticException</code></td>
</tr>
<tr>
<td><code>CloneNotSupportedException</code></td>
<td><code>ArrayStoreException</code></td>
</tr>
<tr>
<td><code>IllegalAccessException</code></td>
<td><code>IllegalArgumentException</code></td>
</tr>
<tr>
<td><code>InstantiationException</code></td>
<td><code>NumberFormatException</code></td>
</tr>
<tr>
<td><code>InterruptedException</code></td>
<td><code>IllegalMonitorStateException</code></td>
</tr>
<tr>
<td><code>NoSuchFieldException</code></td>
<td><code>IllegalStateException</code></td>
</tr>
<tr>
<td><code>NoSuchMethodException</code></td>
<td><code>SecurityException</code></td>
</tr>
</tbody></table>
<h2 id="Throwing-Exceptions"><a href="#Throwing-Exceptions" class="headerlink" title="Throwing Exceptions"></a>Throwing Exceptions</h2><blockquote>
<p>*<em>Concept: *</em> You can write code that throws one of the standard Java exceptions, or an instance of a custom exception class that you have designed.</p>
</blockquote>
<p>You can use the <code>throw</code> statement to throw an exception manually. The general format of the <code>throw</code> statement is as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ExceptionType(MessageString);</span><br></pre></td></tr></table></figure>

<p>The <code>throw</code> statement causes an exception object to be created and thrown.</p>
<p><strong>The <code>MessageString</code> argument contains a custom error message that can be retrieved from the exception object’s <code>getMessage</code> method.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"Access denied - You must be at least 18 years old."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">"Access granted - You are old enough!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    checkAge(<span class="number">15</span>); <span class="comment">// Set age to 15 (which is below 18...)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>NOTE:</strong> Because the <code>ArithmeticException</code> class inherits from the <code>RuntimeException</code> class, it is unchecked. <strong>If we had chosen a checked exception class, we would have to put a throws clause in the constructor’s header.</strong></p>
</blockquote>
<h3 id="Creating-Your-Own-Exception-Classes"><a href="#Creating-Your-Own-Exception-Classes" class="headerlink" title="Creating Your Own Exception Classes"></a>Creating Your Own Exception Classes</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NegativeStartingBalance</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      This constructor uses a generic</span></span><br><span class="line"><span class="comment">      error message.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">NegativeStartingBalance</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(<span class="string">"Error: Negative starting balance"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">      This constructor specifies the bad starting</span></span><br><span class="line"><span class="comment">      balance in the error message.</span></span><br><span class="line"><span class="comment">      <span class="doctag">@param</span> The bad starting balance.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">NegativeStartingBalance</span><span class="params">(<span class="keyword">double</span> amount)</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(<span class="string">"Error: Negative starting balance: "</span> + amount);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The <strong>no-arg constructor</strong> passes the string “Error: Negative starting balance” to the superclass constructor. This is the error message that is retrievable from an object’s <code>getMessage</code> method.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BankAccount</span><span class="params">(<span class="keyword">double</span> startBalance)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> NegativeStartingBalance</span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (startBalance &lt; <span class="number">0</span>)</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> NegativeStartingBalance(startBalance);</span><br><span class="line">	balance = startBalance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Note that <code>NegativeStartingBalance</code> extends the <strong>Exception class</strong>. This means that it is a <strong>checked exception</strong> class. Because of this, <strong>the constructor header must have a <code>throws</code> clause listing the exception type.</strong></p>
<h3 id="Using-the-exception-Tag-in-Documentation-Comments"><a href="#Using-the-exception-Tag-in-Documentation-Comments" class="headerlink" title="Using the @exception Tag in Documentation Comments"></a>Using the @exception Tag in Documentation Comments</h3><p>When the javadoc utility sees an @exception tag inside a method’s documentation comments, it knows that the name of an exception appears next, followed by a description of the events that cause the exception.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @exception ExceptionName Description</span></span><br></pre></td></tr></table></figure>

<p><strong>Remember the following points about @exception tag comments:</strong></p>
<p>• The @exception tag in a method’s documentation comment must appear after the general<br>description of the method.</p>
<p>• The description can span several lines. It ends at the end of the documentation comment<br>(the */ symbol), or at the beginning of another tag.</p>
<h2 id="Advanced-Topics-Binary-Files-Random-Access-Files-and-Object-Serialization"><a href="#Advanced-Topics-Binary-Files-Random-Access-Files-and-Object-Serialization" class="headerlink" title="Advanced Topics: Binary Files, Random Access Files, and Object Serialization"></a>Advanced Topics: Binary Files, Random Access Files, and Object Serialization</h2><blockquote>
<p>*<em>CONCEPT: *</em></p>
<p>A file that contains raw binary data is known as a binary file. The content of a <strong>binary file</strong> is not formatted as text, and not meant to be opened in a text editor.</p>
<p>A <strong>random access file</strong> is a file that allows a program to read data from any location within the file, or write data to any location within the file.</p>
<p><strong>Object serialization</strong> is the process of converting an object to a series of bytes and saving them to a file. De-serialization is the process of reconstructing a serialized object.</p>
</blockquote>
<h3 id="Binary-Files"><a href="#Binary-Files" class="headerlink" title="Binary Files"></a>Binary Files</h3><p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200415014101.png" alt=""></p>
<p>When a number such as 1297 is stored in the computer’s memory, it isn’t stored as text, however. It is formatted as a binary number.</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200415014200.png" alt=""></p>
<h3 id="Writing-Data-to-Binary-File"><a href="#Writing-Data-to-Binary-File" class="headerlink" title="Writing Data to Binary File"></a>Writing Data to Binary File</h3><p>To write data to a binary file you must create objects from the following classes:</p>
<p><code>FileOutputStream</code></p>
<p>This class, which is in the <code>java.io</code> package, allows you to open a file for writing binary data and establish a connection with it; however, it provides only basic functionality for writing bytes to the file.</p>
<p><code>DataOutputStream</code></p>
<p>This class which is in the <code>java.io</code> package, allows you to write data of any primitive type or String objects to a binary file. The <code>DataOutputStream</code> class by itself cannot directly access a file, however. It is used in conjunction with a <code>FileOutputStream</code> object that has a connection to a file.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FileOutputStream fstream = <span class="keyword">new</span> FileOutputStream(<span class="string">"MyInfo.dat"</span>);</span><br><span class="line">DataOutputStream outputFile = <span class="keyword">new</span> DataOutputStream(fstream);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>NOTE: ** **If the file that you are opening with the <code>FileOutputStream</code> object already</strong> &gt; <strong>exists, it will be erased and an empty file by the same name will be created.</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataOutputStream outputFile =</span><br><span class="line"><span class="keyword">new</span> DataOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"MyInfo.dat"</span>));</span><br></pre></td></tr></table></figure>

<p>Once the <code>DataOutputStream</code> object has been created, you can use it to write binary data to<br>the file.</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200415014450.png" alt=""></p>
<h2 id="General-Skill"><a href="#General-Skill" class="headerlink" title="General Skill"></a>General Skill</h2><p>Import Java package</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// For File class and FileNotFoundException</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fro the Scanner class</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// For the JOptionPane class</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.JOptionPane;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/myBlog.github.io/2020/04/07/Git/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/night.png" alt=""></p>
<p>鑒於 Git 的指令太多, 因此寫一個個人總結作為一次學習過程.</p>
<p><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">官方資料</a></p>
<a id="more"></a>

<h2 id="工作區、暫存區和版本庫"><a href="#工作區、暫存區和版本庫" class="headerlink" title="工作區、暫存區和版本庫"></a>工作區、暫存區和版本庫</h2><p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/1_9qX9F9MGsWKfcmgTOR9BPw.png" alt=""></p>
<p>事實上, 圖中已經顯示絕大部分常用的 Git 指令.</p>
<ul>
<li><strong>工作區 (Workspace)</strong></li>
<li><strong>暫存區 (Index / Stage)</strong></li>
<li><strong>版本庫 (Repository)</strong></li>
</ul>
<blockquote>
<p>文件經過初始化后會形成一個隱藏的.git 文件, 以上所有的區域都會存儲于.git 文件之中</p>
</blockquote>
<h3 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h3><ol>
<li>在 GitHub 上創建 repo 并 clone URL 到本地目錄</li>
<li>在克隆的資源上添加或者修改代碼</li>
<li>使用 fetch/pull 更新資源</li>
<li>如果想要提交修改的文件到 GitHub 可以使用 push</li>
<li>在 push 之前應該檢查并添加至版本庫中</li>
</ol>
<hr>
<h2 id="本地操作"><a href="#本地操作" class="headerlink" title="本地操作"></a>本地操作</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置個人的用戶名稱和Email</span></span><br><span class="line">$ git config --global user.name <span class="string">"FgSurewin"</span></span><br><span class="line">$ git config --global user.email FgSurewin@gmail.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置信息</span></span><br><span class="line">$ git config --list</span><br></pre></td></tr></table></figure>

<h4 id="項目初始化"><a href="#項目初始化" class="headerlink" title="項目初始化"></a>項目初始化</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地文件的初始化</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆已創建的GitHub項目</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<h4 id="基本快照-Snapshot"><a href="#基本快照-Snapshot" class="headerlink" title="基本快照 (Snapshot)"></a>基本快照 (Snapshot)</h4><p>我們將每一個將要存儲的版本都稱為快照, 使用 add 指令可以將代碼存入暫存區. 而後我們再使用 commit 來實現版本號的存儲. 而 Git 的最大作用便是將每一個版本號都能存儲起來, 方便我們對版本的控制.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件至暫存區</span></span><br><span class="line">$ git add [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加當前目錄所有文件至暫存區</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暫存區的文件到倉庫區</span></span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit來替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代碼沒有任何新變化, 則用來改寫上一次commit的提交信息</span></span><br><span class="line">$ git commit -amend -m <span class="string">"message"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交時顯示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br></pre></td></tr></table></figure>

<h4 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h4><p>Git 中的查看信息功能主要分成以下部分:</p>
<ul>
<li>每次更改動作發生后, 使用 git status 來查看變更的文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 當我們添加文件至暫存區且還沒commit至倉庫區時</span></span><br><span class="line">$ git add .</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">M  hello.php</span><br><span class="line"><span class="comment"># A表示add, Git會提醒我們暫存區已經獲取到文件但尚未commit至倉庫區. 如果我們已經commit至倉庫區, 那麼我們會看不到任何信息, 因為已經順利完成一次"快照"</span></span><br><span class="line"><span class="comment"># M表示modify</span></span><br><span class="line"><span class="comment"># --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -s是short的意思(推薦使用), 如果沒有-s則顯示完整信息</span></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   README</span><br><span class="line">    new file:   hello.php</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 git diff 來查看具體的變化信息</li>
</ul>
<p>git status 是用於查看文件的變化情況, 但是不知道具體每個文件的內容的具體變化情況. 而 diff 則是用於查看每個文件的具體變化情況</p>
<p>具體的使用方法是: 當我們修改了工作區的代碼并使用 diff 時, Git 會將我們的文件內容與暫存區的文件內容進行比對, 然後顯示具體的變化.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 尚未緩存的改動</span></span><br><span class="line"><span class="comment"># 查看工作區和暫存區的差異</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已經暫存的文件的改動</span></span><br><span class="line"><span class="comment"># 查看暫存區和版本庫的差異</span></span><br><span class="line">$ git diff --cached</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有未緩存的文件的改動</span></span><br><span class="line"><span class="comment"># 查看工作區和版本庫的差異</span></span><br><span class="line">$ git diff HEAD</span><br></pre></td></tr></table></figure>

<blockquote>
<p>HEAD 的理解: 在 Git 中, 它是一個指針, 指向當前所在的本地分支(想象為當前分支的別名)</p>
</blockquote>
<ul>
<li>查看當前分支的執行歷史</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 顯示當前分支的版本歷史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 顯示方式為單行</span></span><br><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以圖像的方式顯示</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph</span><br></pre></td></tr></table></figure>

<ul>
<li>查看所有的 git 指令歷史</li>
</ul>
<p>當我們想撤回版本的時候, 我們可能需要知道每一次 commit 的哈希碼.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有git動作歷史</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>

<p>當我撤回版本之後, 我們可能會丟失屬於未來的版本.如果我後悔了, 想回到”未來”, 但是 git log 已經無法再查看到未來的 commit 的哈希碼, 這時候我們可以用 git reflog 來查看我們所有的指令歷史來尋找對應的哈希碼.</p>
<blockquote>
<p>理論上, 所有存進 git 中的版本都能自由選擇與撤回</p>
</blockquote>
<h4 id="撤回文件"><a href="#撤回文件" class="headerlink" title="撤回文件"></a>撤回文件</h4><p>Git 中的撤回文件可以理解成保存指令的反向指令.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作區 ==&gt; 暫存區</span></span><br><span class="line">$ git add [flie]</span><br><span class="line"><span class="comment"># 暫存區 ==&gt; 工作區</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暫存區 ==&gt; 版本庫(倉庫區)</span></span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br><span class="line"><span class="comment"># 版本庫(倉庫區) ==&gt; 暫存區</span></span><br><span class="line">$ git reset [指定版本的哈希碼]</span><br><span class="line"><span class="comment"># 版本庫(倉庫區) ==&gt; 暫存區 + 工作區</span></span><br><span class="line">$ git reset --hard [指定版本的哈希碼]</span><br></pre></td></tr></table></figure>

<p>因為 HEAD 是版本庫的游標關係, 我們還能以 HEAD 作為版本號</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 版本庫(倉庫區) ==&gt; 暫存區</span></span><br><span class="line">$ git reset HEAD^</span><br><span class="line"><span class="comment"># 版本庫(倉庫區) ==&gt; 暫存區 + 工作區</span></span><br><span class="line">$ git reset --hard HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其中^表示上一個版本</span></span><br></pre></td></tr></table></figure>

<h4 id="刪除文件"><a href="#刪除文件" class="headerlink" title="刪除文件"></a>刪除文件</h4><p>當我們只是刪除工作區的文件時, 我們只需要簡單實用 Linux 命令行即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm [file]</span><br></pre></td></tr></table></figure>

<p>當我們想要刪除已經存儲在版本庫中的文件的時候, 我們需要使用 git 的命令行.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 刪除版本庫文件</span></span><br><span class="line">$ git rm [file]</span><br><span class="line"><span class="comment"># 提交commit</span></span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br></pre></td></tr></table></figure>

<p>我們看到, 刪除文件和添加文件一樣是需要 commit 的. 這是一個合理的操作方式, 因為我們明白 Git 的運行方式是對於版本庫的管理. 每一次的 commit 都會是一個”快照”, 一個新的版本. 而所謂的刪除版本庫中的文件也不是真正意義上的刪除文件, 只是<strong>建立了一個沒有這個文件的版本</strong>. 當我需要撤回文件的時候就可以根據實際需求而返回到相應的版本.</p>
<h4 id="分支使用"><a href="#分支使用" class="headerlink" title="分支使用"></a>分支使用</h4><h5 id="分支原理"><a href="#分支原理" class="headerlink" title="分支原理"></a>分支原理</h5><p>創建名為 testing 的指針</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch testing</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/head-to-master.png" alt=""></p>
<p>事實上每一個分支都是一個移動的指針 ==&gt; 指向不同版本號. 而切換分支就是在移動 HEAD 這個指針的位置.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切換至分支testing</span></span><br><span class="line">$ git checkout testing</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/head-to-testing.png" alt=""></p>
<p>之後分支的每一次 commit 都只是指針不斷的變化</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/advance-testing.png" alt=""></p>
<p>直到你覺得時機成熟, 可以合併分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 合併分支 -- fast-forward</span></span><br><span class="line">$ git merge testing</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合併分支 -- non-fast-forward</span></span><br><span class="line">$ git merge --no-ff -m <span class="string">"message"</span> testing</span><br></pre></td></tr></table></figure>

<p><strong>前者 fast-forward 模式</strong>下, 只是單純的將 master 的指針移動至 testing 的最新版本庫, 兩者的移動軌跡會重合, 導致你無法看清分支的軌跡.</p>
<p>後者則是能保存好分支的軌跡</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/basic-merging-2.png" alt=""></p>
<h5 id="解決衝突"><a href="#解決衝突" class="headerlink" title="解決衝突"></a>解決衝突</h5><p><strong>有時候合併操作不會如此順利. 如果你在兩個不同的分支中, 對同一個文件的同一個部分進行了不同的修改, Git 就沒法乾淨的合併它們.</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/advance-master.png" alt=""></p>
<p>假設 master 與 testing 指向的這兩個不同的版本號都是修改同一個文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 同時修改index.html,則會出現以下錯誤</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:index.html</span><br><span class="line">&lt;div id=<span class="string">"footer"</span>&gt;contact : email.support@github.com&lt;/div&gt;</span><br><span class="line">=======</span><br><span class="line">&lt;div id=<span class="string">"footer"</span>&gt;</span><br><span class="line"> please contact us at support@github.com</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; iss53:index.html</span><br></pre></td></tr></table></figure>

<p>解決衝突的方式查看具體不同的內容, 編輯者自行修改所需的內容并 add 到暫存區, 然後 commit. 這樣我們就能有一個新的版本號且內容是編輯者所需的.</p>
<h5 id="多人協作"><a href="#多人協作" class="headerlink" title="多人協作"></a>多人協作</h5><p>(1) 分支管理</p>
<p>master 是用於版本的最終更新的, 所以往往會滯後.</p>
<p>develop 是用于開發, 每當一個功能完善后的版本出現, 便會與 master 合併發佈新的版本.</p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/0.png" alt=""></p>
<p>實際寫作可參考: <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">A successful Git branching model</a></p>
<p>(2) 避免衝突</p>
<p>在團隊工作中, 多人協作很容易會遇到一些衝突的問題發生. 以 GitHub 為例, 我們會發現后 push 的人為了避免衝突, 往往需要先 pull 更新前者版本的代碼, 然後再 push 來避免衝突.</p>
<h3 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h3><p>對於操作 Git 而言, 關鍵是明白三個區域之間的聯繫. 每個指令與這三個區域的關係.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作區 ==&gt; 暫存區</span></span><br><span class="line">$ git add [flie]</span><br><span class="line"><span class="comment"># 暫存區 ==&gt; 工作區</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暫存區 ==&gt; 版本庫(倉庫區)</span></span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br><span class="line"><span class="comment"># 版本庫(倉庫區) ==&gt; 暫存區</span></span><br><span class="line">$ git reset [指定版本的哈希碼]</span><br><span class="line"><span class="comment"># 版本庫(倉庫區) ==&gt; 暫存區 + 工作區</span></span><br><span class="line">$ git reset --hard [指定版本的哈希碼]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件狀態(是否修改/創建/刪除)</span></span><br><span class="line">$ git status</span><br><span class="line">$ git status -s</span><br><span class="line"><span class="comment"># 查看文件內容差異: 工作區 vs 暫存區</span></span><br><span class="line">$ git diff</span><br><span class="line"><span class="comment"># 查看文件內容差異: 暫存區 vs 倉庫區</span></span><br><span class="line">$ git diff --cached</span><br><span class="line"><span class="comment"># 查看文件內容差異: 工作區 vs 倉庫區</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除工作區中的文件</span></span><br><span class="line">$ rm [file]</span><br><span class="line"><span class="comment"># 刪除倉庫區中的文件</span></span><br><span class="line">$ git rm [file]</span><br><span class="line">$ git commit -m <span class="string">"message"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分支</span></span><br><span class="line">$ git branch</span><br><span class="line"><span class="comment"># 建立分支</span></span><br><span class="line">$ git branch [name]</span><br><span class="line"><span class="comment"># 刪除分支</span></span><br><span class="line">$ git branch -d [name]</span><br><span class="line"><span class="comment"># 切換分支</span></span><br><span class="line">$ git checkout [branchName]</span><br><span class="line">$ git switch [branchName]</span><br><span class="line"><span class="comment"># 快速建立分支+切換到該分支</span></span><br><span class="line">$ git checkout -b [branchName]</span><br><span class="line">$ git switch -c [branchName]</span><br><span class="line"><span class="comment"># 合併分支 - fast-forward</span></span><br><span class="line">$ git merge [branchName]</span><br><span class="line"><span class="comment"># 合併分支 - non-fast-forward</span></span><br><span class="line">$ git merge --no-ff -m <span class="string">"message"</span> [branchName]</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="遠程操作"><a href="#遠程操作" class="headerlink" title="遠程操作"></a>遠程操作</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="創建遠程倉庫"><a href="#創建遠程倉庫" class="headerlink" title="創建遠程倉庫"></a>創建遠程倉庫</h4><p>常見的使用流程:</p>
<p>GitHub 上發現項目 ==&gt; fork(保存至自己的倉庫中) ==&gt; clone URL 至本地工作區</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># clone的方法很多種</span></span><br><span class="line"><span class="comment"># 常見是直接在GitHub的項目中點擊複製URL</span></span><br><span class="line">$ git <span class="built_in">clone</span> [URL]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看遠程倉庫</span></span><br><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line"><span class="comment"># 添加遠程倉庫</span></span><br><span class="line">$ git remote add pb https://github.com/paulboone/ticgit</span><br><span class="line"><span class="comment"># 查看詳細的遠程倉庫信息</span></span><br><span class="line">$ git remote -v</span><br><span class="line">origin	https://github.com/schacon/ticgit (fetch)</span><br><span class="line">origin	https://github.com/schacon/ticgit (push)</span><br><span class="line">pb	https://github.com/paulboone/ticgit (fetch)</span><br><span class="line">pb	https://github.com/paulboone/ticgit (push)</span><br><span class="line"><span class="comment"># 顯示某個遠程倉庫的信息</span></span><br><span class="line">$ git remote show [remote]</span><br></pre></td></tr></table></figure>

<h4 id="更新本地工作區"><a href="#更新本地工作區" class="headerlink" title="更新本地工作區"></a>更新本地工作區</h4><blockquote>
<p>原項目的倉庫 —–&gt; 工作區</p>
</blockquote>
<p>在使用 git 進行更新本地工作區的時候, 我們會使用 fetch 和 pull.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用fetch</span></span><br><span class="line">$ git fetch [remote] [branch]</span><br><span class="line">$ git merge [remote]/[branch]</span><br><span class="line"><span class="comment"># 實例</span></span><br><span class="line">$ git fetch origin</span><br><span class="line">$ git fetch origin/master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用pull</span></span><br><span class="line">$ git pull [remote] [branch]</span><br></pre></td></tr></table></figure>

<p>事實上, 使用 fetch 和 pull 進行的更新, 不是直接在源代碼的層面上直接更新. 不管是 fetch 還是 pull, 其實都是將遠程倉庫的最新版本(HEAD)內容下載至本地工作區(所有分支, 除非特別指定).</p>
<p>具體路徑是:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .git =&gt; refs =&gt; remotes =&gt; origin(默認) =&gt; [分支內容]</span></span><br><span class="line"><span class="comment"># fetch的工作是單純的下載分支, 而需要自行合併所需的分支內容</span></span><br><span class="line">$ git fetch origin/master</span><br><span class="line"><span class="comment"># 則是表明需要合併遠程倉庫中master分支的內容到當前分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull指令則更為便捷 =&gt; fetch + merge</span></span><br><span class="line"><span class="comment"># 由於本地工作區的分支名稱與遠程倉庫的分支名稱是一一對應</span></span><br><span class="line"><span class="comment"># 默認情況下是會直接合併到當前分支</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment"># 以上代碼等同於</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line">$ git merge [remote]/[current_branch]</span><br></pre></td></tr></table></figure>

<p><strong>fetch</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下載所有分支內容</span></span><br><span class="line">$ git fetch origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下載指定分支 + 合併</span></span><br><span class="line">$ git fetch origin master</span><br><span class="line">$ git merge origin/master</span><br></pre></td></tr></table></figure>

<p><strong>pull</strong>:</p>
<p>簡單而言, pull = fetch + merge</p>
<p>如果你正處於 master 分支, 並且運行 git pull, 就會抓取所有的遠程引用, 然後將遠程 master 分支合併到本地 master 分支. 它也會列出拉取到的所有遠程引用.</p>
<h4 id="推送代碼至遠程倉庫"><a href="#推送代碼至遠程倉庫" class="headerlink" title="推送代碼至遠程倉庫"></a>推送代碼至遠程倉庫</h4><p>工作區 ==&gt; 自己的遠程倉庫 —–&gt; 原項目的倉庫</p>
<p>當我 clone 別人的項目時, 我們是沒有權利去直接推送至元項目的倉庫的, 我們只能推送至我們自己的倉庫, 這就是為什麼我們常常需要 fork 別人的項目. (如果你成為該項目的 contributor, 或者原項目主人給予權限則可以直接關聯這個遠程倉庫進行直接推送)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推送至遠程倉庫</span></span><br><span class="line"><span class="comment"># 默認的遠程倉庫是origin</span></span><br><span class="line"><span class="comment"># push的作用是將本地[branch]推送至遠程倉庫的[branch]</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------------------</span></span><br><span class="line">$ git push origin master</span><br><span class="line"><span class="comment"># 以上命令行會將本地的master分支內容推送至遠程倉庫的master分支中</span></span><br><span class="line"><span class="comment"># 即使你切換到其他分支, 依然只是推送指令之中[branch]的內容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送本地所有分支至遠程倉庫</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>

<p>如果我們需要將代碼推送至原項目 GitHub 倉庫中, 我們需要 pull request.</p>
<hr>
<h2 id="常用的-Linux-命令"><a href="#常用的-Linux-命令" class="headerlink" title="常用的 Linux 命令"></a>常用的 Linux 命令</h2><h4 id="創建目錄-文件夾"><a href="#創建目錄-文件夾" class="headerlink" title="創建目錄/文件夾"></a>創建目錄/文件夾</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 創建目錄</span></span><br><span class="line">mkdir [dirName]</span><br><span class="line"><span class="comment"># 創建帶有子目錄的目錄</span></span><br><span class="line">mkdir -p fater/son</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除目錄</span></span><br><span class="line">rmdir [dirName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切換目錄</span></span><br><span class="line"><span class="built_in">cd</span> [dirName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 顯示目錄結構</span></span><br><span class="line">ls</span><br></pre></td></tr></table></figure>

<h4 id="創建文件"><a href="#創建文件" class="headerlink" title="創建文件"></a>創建文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 創建文件</span></span><br><span class="line">touch test.md</span><br><span class="line">touch index.js</span><br></pre></td></tr></table></figure>

<h4 id="刪除文件-1"><a href="#刪除文件-1" class="headerlink" title="刪除文件"></a>刪除文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 刪除文件</span></span><br><span class="line">rm [file]</span><br></pre></td></tr></table></figure>

<h4 id="Vim-的基本操作指令"><a href="#Vim-的基本操作指令" class="headerlink" title="Vim 的基本操作指令"></a>Vim 的基本操作指令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用vim來編輯代碼</span></span><br><span class="line">vim [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輸入模式</span></span><br><span class="line"><span class="comment"># 進入vim后 ==&gt; 輸入i</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"><span class="comment"># ESC ==&gt; 輸入:wq</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX</title>
    <url>/myBlog.github.io/2020/04/02/LaTeX/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/LaTeX.png" alt=""></p>
<p>對於數學公式的輸入, 我一直選擇使用 MathType 作為 Word 的內置插件來編輯數學公式. 隨著對 Markdown 產生依賴, 繼而來研究 LaTeX 公式.</p>
<p>正如很多計算機語言一樣, LaTeX 本身也有屬於自己的一套規則, 具體可以查看相對完整的手冊</p>
<p><a href="https://www.caam.rice.edu/~heinken/latex/symbols.pdf" target="_blank" rel="noopener">LaTeX 在線 PDF 手冊</a></p>
<a id="more"></a>

<h2 id="基本語法"><a href="#基本語法" class="headerlink" title="基本語法"></a>基本語法</h2><p>使用兩個$$或者四個來包裹數學公式.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ax^2+bx+c&#x3D;0$</span><br><span class="line">--------------</span><br><span class="line">$$</span><br><span class="line">ax^2+bx+c&#x3D;0</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>利用反斜杠來編輯所需內容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\lim_&#123;n \to \infty&#125;f(x)</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\lim_{n \to \infty}f(x)<br>$$</p>
<h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>任意一個可以使用 LaTeX 語法的 IDE 都可以運行. 剛好 Typora 本身也兼容 LaTeX, 非常便捷.</p>
<p><strong>操作方式</strong>:</p>
<ul>
<li>右鍵 =&gt; 插入 =&gt; 公式塊</li>
<li><strong>$$</strong> =&gt; Enter (推薦使用)</li>
</ul>
<h2 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h2><h3 id="運算符"><a href="#運算符" class="headerlink" title="運算符"></a>運算符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$+$、$-$、$&#x3D;$、$&gt;$、$&lt;$、$\times$、$\div$、$\equiv$、$\leq$、$\geq$、$\neq$</span><br></pre></td></tr></table></figure>

<p>$$<br>+、-、=、&gt;、&lt;、\times、\div、\equiv、\leq、\geq、\neq<br>$$</p>
<h3 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\frac&#123;d&#125;&#123;dy&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\frac{d}{dy}<br>$$</p>
<h3 id="n-次方根"><a href="#n-次方根" class="headerlink" title="n 次方根"></a>n 次方根</h3><p>這裡需要注意的是利用方框號來表示 N</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\sqrt&#123;3x-1&#125;+\sqrt[5]&#123;2y^5-4&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\sqrt{3x-1}+\sqrt[5]{2y^5-4}<br>$$</p>
<h3 id="上標與下標"><a href="#上標與下標" class="headerlink" title="上標與下標"></a>上標與下標</h3><ul>
<li>使用<strong>^</strong>作為上標的標誌</li>
<li>使用<strong>_</strong>下劃線作為下標的標誌</li>
</ul>
<p>以累加作為一個簡單的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\sum_&#123;n&#x3D;1&#125;^\infty \frac&#123;1&#125;&#123;n+1&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\sum_{n=1}^\infty \frac{1}{n+1}<br>$$</p>
<h3 id="極限"><a href="#極限" class="headerlink" title="極限"></a>極限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\lim_&#123;n \to \infty&#125;f(x)</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>\lim_{n \to \infty}f(x)<br>$$</p>
<h3 id="分段函數"><a href="#分段函數" class="headerlink" title="分段函數"></a>分段函數</h3><p>這是複雜的數學公式, 需要用到 LaTeX 的 cases 語法, 用<code>\begin{cases}</code>和<code>\end{cases}</code>圍住即可, 中間則用<code>\\</code>來分段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">X(m,n)&#x3D;</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">x(n),\\</span><br><span class="line">x(n-1),\\</span><br><span class="line">x(n+1)</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<p>$$<br>X(m,n)=<br>\begin{cases}<br>x(n),\<br>x(n-1),\<br>x(n+1)<br>\end{cases}<br>$$</p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>Inheritance</title>
    <url>/myBlog.github.io/2020/03/30/Inheritance/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/Inheritance.png" alt=""></p>
<h2 id="What-is-inheritance"><a href="#What-is-inheritance" class="headerlink" title="What is inheritance?"></a>What is inheritance?</h2><p><strong>Inheritance allows a new class to extends an existing class. The new class inherits the members of the class it extends</strong></p>
<a id="more"></a>

<h3 id="Inheritance-and-the-“Is-a”-Relationship"><a href="#Inheritance-and-the-“Is-a”-Relationship" class="headerlink" title="Inheritance and the “Is a” Relationship"></a>Inheritance and the “Is a” Relationship</h3><ul>
<li>When one object is a specialized version of another object, there is an <strong>“Is a”</strong> relationship between them. (For example, a grasshopper is an insect).</li>
<li>When an <strong>“Is a”</strong> relationship exists between objects, it means that the specialized object has all of the characteristics of the general object, plus additional characteristics that make it special.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// General class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"I am eating"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">"I am sleeping"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">introduction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello！I am No."</span>         + id + <span class="string">" "</span> + name + <span class="string">"."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Specialized version class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Penguin</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(myName, myid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Note:</strong></p>
<p>superclass == base class</p>
<p>subclass == derived class</p>
<p>&emsp;&emsp;Private members of the superclass cannot be accessed by the subclass, so technically speaking, they are not inherited. When an object of the subclass is created, the private members of the superclass exist in memory, but only methods in the superclass can access them.</p>
<h3 id="Inheritance-in-UML-Diagram"><a href="#Inheritance-in-UML-Diagram" class="headerlink" title="Inheritance in UML Diagram"></a>Inheritance in UML Diagram</h3><p><strong>You show inheritance in a UML diagram by connecting two classes with a line that has an open arrowhead at one end.</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200330103331.png" alt=""></p>
<blockquote>
<p>The superclass constructor always executes before the subclass constructor</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass1</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SuperClass1</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 		System.out.println(<span class="string">"This is the superclass constructor."</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass1</span> <span class="keyword">extends</span> <span class="title">SuperClass1</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SubClass1</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 		System.out.println(<span class="string">"This is the subclass constructor."</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result:</span></span><br><span class="line"><span class="comment">// This is the superclass constructor.</span></span><br><span class="line"><span class="comment">// This is the subclass constructor.</span></span><br></pre></td></tr></table></figure>

<h3 id="Inheritance-Does-Not-Work-in-Revers"><a href="#Inheritance-Does-Not-Work-in-Revers" class="headerlink" title="Inheritance Does Not Work in Revers"></a>Inheritance Does Not Work in Revers</h3><p><strong>This means it is not possible for a superclass to call a subclass’s method.</strong></p>
<h2 id="Calling-the-Superclass-Constructor"><a href="#Calling-the-Superclass-Constructor" class="headerlink" title="Calling the Superclass Constructor"></a>Calling the Superclass Constructor</h2><blockquote>
<p><strong>Concept:</strong> The super key word refers to an object’s superclass. You can use the super key word to call a superclass constructor.</p>
</blockquote>
<p><strong>Here are three guidelines you should remember about calling a superclass constructor:</strong></p>
<p>• <strong>The <em>super</em> statement that calls the superclass constructor may be written only in the subclass’s constructor.</strong> You cannot call the superclass constructor from any other method.</p>
<p>• <strong>The <em>super</em> statement that calls the superclass constructor must be the first statement in the subclass’s constructor.</strong> This is because the superclass’s constructor must execute before the code in the subclass’s constructor executes.</p>
<p>• <strong>If a subclass constructor does not explicitly call a superclass constructor, Java will automatically call the superclass’s default constructor, or no-arg constructor, just before the code in the subclass’s constructor executes.</strong></p>
<h3 id="Summary-of-Constructor-Issues-in-Inheritance"><a href="#Summary-of-Constructor-Issues-in-Inheritance" class="headerlink" title="Summary of Constructor Issues in Inheritance"></a>Summary of Constructor Issues in Inheritance</h3><p>• The superclass constructor always executes before the subclass constructor.</p>
<p>• You can write a super statement that calls a superclass constructor, but only in the subclass’s constructor. You cannot call the superclass constructor from any other method.</p>
<p>• If a super statement that calls a superclass constructor appears in a subclass constructor,<br>it must be the first statement.</p>
<p>• If a subclass constructor does not explicitly call a superclass constructor, Java will automatically call super() just before the code in the subclass’s constructor executes.</p>
<p>• If a superclass does not have a default constructor and does not have a no-arg constructor, then a class that inherits from it must call one of the constructors that the superclass does have.</p>
<h2 id="Overriding-Superclass-Methods"><a href="#Overriding-Superclass-Methods" class="headerlink" title="Overriding Superclass Methods"></a>Overriding Superclass Methods</h2><blockquote>
<p><strong>Concept:</strong> A subclass may have a method with the same signature as a superclass method. In such a case, the subclass method overrides the superclass method.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mouse</span><span class="params">(String myName, <span class="keyword">int</span> myid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(myName, myid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The @Override annotation is not required, but it is recommended that you use it.</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        System.out.println(<span class="string">"Sorry, I want ot eat more!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Overload</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String food)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.eat();</span><br><span class="line">        System.out.println(<span class="string">"Sorry, I want ot eat more "</span> + food + <span class="string">" !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Overloading-versus-Overriding"><a href="#Overloading-versus-Overriding" class="headerlink" title="Overloading versus Overriding"></a>Overloading versus Overriding</h3><p><strong>The following list summarizes the distinction between overloading and overriding:</strong></p>
<p>• <strong>If two methods have the same name but different signatures, they are overloaded.</strong> This is true where the methods are in the same class or where one method is in the superclass and the other method is in the subclass.</p>
<p>• If a method in a subclass has the same signature as a method in the superclass, the subclass method overrides the superclass method.</p>
<h3 id="Preventing-a-Method-from-Being-Overridden"><a href="#Preventing-a-Method-from-Being-Overridden" class="headerlink" title="Preventing a Method from Being Overridden"></a>Preventing a Method from Being Overridden</h3><blockquote>
<p>Using key word : <strong>final</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">message</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>If a subclass attempts to override a <strong>final</strong> method, the compiler generates an error.</p>
<h2 id="Protected-Members"><a href="#Protected-Members" class="headerlink" title="Protected Members"></a>Protected Members</h2><blockquote>
<p><strong>Concept:</strong> Protected members of a class may be accessed by methods in a subclass and by methods in the same package as the class.</p>
</blockquote>
<p>&emsp;&emsp;A protected member is not quite private, because it may be accessed by some methods outside the class. Protected members are not quite public either because access to them is restricted to methods in the <strong>same class</strong>, <strong>subclasses</strong>, and <strong>classes in the same package</strong> as the member’s class.</p>
<blockquote>
<p><strong>Note:</strong> It is always better to make all fields private and then provide public methods for accessing those fields.</p>
</blockquote>
<h3 id="Package-Access"><a href="#Package-Access" class="headerlink" title="Package Access"></a>Package Access</h3><p>&emsp;&emsp;If you do not provide an access specifier for a class member, the class member is given package access by <strong>default</strong>. <strong>This means that any method in the same package may access the member.</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200330103544.png" alt=""></p>
<h2 id="Chains-of-Inheritance"><a href="#Chains-of-Inheritance" class="headerlink" title="Chains of Inheritance"></a>Chains of Inheritance</h2><p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200330103630.png" alt=""></p>
<h2 id="The-Object-Class"><a href="#The-Object-Class" class="headerlink" title="The Object Class"></a>The Object Class</h2><p>Every class is derived by object class.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// This two classes are the same.</span></span><br></pre></td></tr></table></figure>

<h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><blockquote>
<p><strong>Concept:</strong> A superclass reference variable can reference objects of a subclass.</p>
</blockquote>
<p>&emsp;&emsp;As we all know that, Java is a strict language which is totally different from JavaScript. When we want to declare a new variable, we should mention about the data type. The word “Polymorphism” was derived base on this condition, which means that a superclass reference variable can point to the instance of subclass.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Assume Animal is a superclass and Pig is subclass</span></span><br><span class="line">Animal obj = <span class="keyword">new</span> Pig();</span><br></pre></td></tr></table></figure>

<p>However, the new instance “obj” only can execute the method belonged to the Animal.</p>
<h3 id="Polymorphism-and-Dynamic-Binding"><a href="#Polymorphism-and-Dynamic-Binding" class="headerlink" title="Polymorphism and Dynamic Binding"></a>Polymorphism and Dynamic Binding</h3><p>&emsp;&emsp;Java performs dynamic binding or late binding when a variable contains a polymorphic reference. This means that the Java Virtual Machine determines at runtime which method to call, <strong>depending on the type of object that the variable references.</strong> <strong>So, it is the object’s type that determines which method is called, not the variable’s type (data type).</strong></p>
<h3 id="The-instanceof-Operator"><a href="#The-instanceof-Operator" class="headerlink" title="The instanceof Operator"></a>The instanceof Operator</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">refVar <span class="keyword">instanceof</span> ClassName</span><br><span class="line"><span class="comment">// return ture or false</span></span><br></pre></td></tr></table></figure>

<h2 id="Abstract-Classes-and-Abstract-Methods"><a href="#Abstract-Classes-and-Abstract-Methods" class="headerlink" title="Abstract Classes and Abstract Methods"></a>Abstract Classes and Abstract Methods</h2><p><strong>&emsp;&emsp;An abstract method is a method that appears in a superclass, but expects to be overridden in a subclass. An abstract method has only a header and no body.</strong></p>
<ul>
<li><p>When an abstract method appears in a class, the method must be overridden in a subclass. <strong>If a subclass fails to override the method, an error will result.</strong> Abstract methods are used to ensure that a subclass implements the method.</p>
</li>
<li><p>When a class contains an abstract method, you cannot create an instance of the class. Abstract methods are commonly used in abstract classes. <strong>An abstract class is not instantiated itself, but serves as a superclass for other classes.</strong> The abstract class represents the generic or abstract form of all the classes that inherit from it.</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String idNumber;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> yearAdmitted;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String number, <span class="keyword">int</span> year)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = number;</span><br><span class="line">        <span class="keyword">this</span>.yearAdmitted = year;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getRemainingHours</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Remember the following points about abstract methods and classes:</strong></p>
<p>• Abstract methods and abstract classes are defined with the abstract key word.</p>
<p>• Abstract methods have no body, and their header must end with a semicolon.</p>
<p>• An abstract method must be overridden in a subclass.</p>
<p>• When a class contains an abstract method, it cannot be instantiated. It must serve as a superclass.</p>
<p>• An abstract class cannot be instantiated. It must serve as a superclass.</p>
<h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>&emsp;&emsp;In its simplest form, an <strong>interface</strong> is like a class that contains <strong>only abstract methods.</strong> An interface cannot be instantiated. Instead, it is implemented by other classes. <strong>When a class implements an interface, the class must override the methods that are specified by the interface.</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface class ==&gt; abstract class</span></span><br><span class="line"><span class="comment">// method of interface class ==&gt; public abstract</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubDemo</span> <span class="keyword">implements</span> <span class="title">Demo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"This is a subclass of interface class."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementing multiple interfaces</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">implements</span> <span class="title">Demo1</span>, <span class="title">Demo2</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="the-Inheritance-of-Interface"><a href="#the-Inheritance-of-Interface" class="headerlink" title="the Inheritance of Interface"></a>the Inheritance of Interface</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// file name: Sports.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHomeTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVisitingTeam</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file name: Football.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingTeamScored</span><span class="params">(<span class="keyword">int</span> points)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfQuarter</span><span class="params">(<span class="keyword">int</span> quarter)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// file name: Hockey.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">homeGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitingGoalScored</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endOfPeriod</span><span class="params">(<span class="keyword">int</span> period)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">overtimePeriod</span><span class="params">(<span class="keyword">int</span> ot)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Extending multiple interfacese</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hockey</span> <span class="keyword">extends</span> <span class="title">Sports</span>, <span class="title">Event</span></span></span><br></pre></td></tr></table></figure>

<h2 id="Inner-Classes"><a href="#Inner-Classes" class="headerlink" title="Inner Classes"></a>Inner Classes</h2><p>&emsp;&emsp;In Java, it is also possible to nest classes (a class within a class). The purpose of nested classes is to group classes that belong together, which makes your code more readable and maintainable.</p>
<p>&emsp;&emsp;To access the inner class, create an object of the outer class, and then create an object of the inner class:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMainClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OuterClass myOuter = <span class="keyword">new</span> OuterClass();</span><br><span class="line">    OuterClass.InnerClass myInner = myOuter.<span class="keyword">new</span> InnerClass();</span><br><span class="line">    System.out.println(myInner.y + myOuter.x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"><span class="comment">// Using static</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMainClass</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    OuterClass.InnerClass myInner = <span class="keyword">new</span> OuterClass.InnerClass();</span><br><span class="line">    System.out.println(myInner.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Anonymous-Inner-Classes"><a href="#Anonymous-Inner-Classes" class="headerlink" title="Anonymous Inner Classes"></a>Anonymous Inner Classes</h2><p><img src="https://cdn.jsdelivr.net/gh/FgSurewin/pictures/img/20200330103739.png" alt=""></p>
]]></content>
      <categories>
        <category>programming</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
